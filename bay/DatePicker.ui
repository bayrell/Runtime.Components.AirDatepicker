<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Components.AirDatepicker.DatePicker" extends="Runtime.Web.Component"
	module="Runtime.Components.AirDatepicker"
>


<use name="Runtime.Date" />
<use name="Runtime.DateTime" />
<use name="Runtime.Core.Message" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.RenderDriver" />
<use name="Runtime.Web.RenderDriverControl" />
<use name="Runtime.Web.Events.ChangeEvent" />


<style>
.input{
	width: 100%;
	padding: 6px 12px;
	background-color: ${ vars["colors", "default", "background"] };
	border: 1px ${ vars["colors", "default", "border"] } solid;
	outline: transparent;
}
</style>



<template name="render">
	%var string name = (params != null) ? params.get("name", "") : "";
	%var string type = (params != null) ? params.get("type", "input") : "";
	%var primitive tag = (params != null) ? params.get("@tag", "") : "";
	
	<div class='datepicker_wrap'>
		<input class='input' @tag={ tag } @event:ChangeEvent="onChange"
			name={ name } type={ type } />
	</div>
	
</template>



<script type="frontend">

var old_value = null;
var childs = null;
var datepicker = null;


/**
 * Returns options
 */
pure Collection<string> getOptions() =>
[
	"classes",
	"inline",
	"language",
	"startDate",
	"firstDay",
	"weekends",
	"dateFormat",
	"altField",
	"altFieldDateFormat",
	"toggleSelected",
	"keyboardNav",
	"position",
	"offset",
	"view",
	"minView",
	"showOtherMonths",
	"selectOtherMonths",
	"moveToOtherMonthsOnSelect",
	"showOtherYears",
	"selectOtherYears",
	"moveToOtherYearsOnSelect",
	"minDate",
	"maxDate",
	"disableNavWhenOutOfRange",
	"multipleDates",
	"multipleDatesSeparator",
	"range",
	"todayButton",
	"clearButton",
	"showEvent",
	"autoClose",
	"prevHtml",
	"nextHtml",
	"navTitles",
	"monthsField",
	"timepicker",
	"dateTimeSeparator",
	"timeFormat",
	"minHours",
	"maxHours",
	"minMinutes",
	"maxMinutes",
	"hoursStep",
	"minutesStep",
];



/**
 * Returns value
 */
pure var getValue(LayoutModel layout, var model, Dict params)
{
	var value = (params != null) ? params.get("value", null) : null;
	var def_value = (params != null) ? params.get("default", null) : null;
	value = rtl::isEmpty(value) ? model : value;
	if (rtl::isEmpty(value)){ value = def_value; }
	return value;
}



/**
 * On change
 */
public void onChange(Message<ChangeEvent> msg)
{
	bool isRange = this.params["range"] == true;
	if (isRange)
	{
		string value = msg.data.value;
		DateTime plan_begin = new DateTime
		{
			"y": rs::substr(value, 0, 4),
			"m": rs::substr(value, 5, 2),
			"d": rs::substr(value, 8, 2),
			"tz": this.controller.layout.tz,
		};
		
		DateTime plan_end = new DateTime
		{
			"y": rs::substr(value, 13, 4),
			"m": rs::substr(value, 18, 2),
			"d": rs::substr(value, 21, 2),
			"tz": this.controller.layout.tz,
		};
		
		msg.data = msg.data.copy{ "value": [plan_begin, plan_end] };
		this.signal(msg.data);
	}
	else
	{
		string value = msg.data.value;
		DateTime new_value = new DateTime
		{
			"y": rs::substr(value, 0, 4),
			"m": rs::substr(value, 5, 2),
			"d": rs::substr(value, 8, 2),
			"tz": this.controller.layout.tz,
		}
		msg.data = msg.data.copy{ "value": new_value };
		this.signal(msg.data);
	}
}



/**
 * Returns true if repaint overrided
 */
public bool isRepaintOverridden()
{
	return true;
}



/**
 * Repaint component
 */
public Collection<var> repaint
(
	LayoutModel layout, var model, Dict params, html content,
	RenderDriverControl control, bool created
)
{
	if (created)
	{
		var res = static::render(layout, model, params, content); res = @res(control);
		this.childs = res;
	}
	return this.childs;
}



/**
 * Returns text from model
 */
public string getInputTextFromValue(var value, bool isRange)
{
	string text = "";
	bool isRange = this.params["range"] == true;
	if (value instanceof Collection)
	{
		if (isRange)
		{
			if (not rtl::isEmpty(value[0]) and (value[0] instanceof Date or value[0] instanceof DateTime))
			{
				text = value[0].getDate( this.controller.layout.tz );
				if (not rtl::isEmpty(value[1]) and (value[1] instanceof Date or value[1] instanceof DateTime))
				{
					text ~= " - " ~ value[1].getDate( this.controller.layout.tz );
				}
			}
		}
	}
	else if (value instanceof DateTime)
	{
		text = value.getDate( this.controller.layout.tz );
	}
	return text;
}



/**
 * Update component
 */
public void updateComponent(RenderDriverControl control, bool created)
{
	parent::updateComponent(control, created);
	
	/* Returns value */
	var value = static::getValue(this.controller.layout, this.model(), this.params);
	string text = this.getInputTextFromValue(value);
	bool isRange = this.params["range"] == true;
	
	bool isChanged = this.old_value != value;
	this.old_value = value;
	
	/* Create datepicker */
	#ifcode JAVASCRIPT then
	
	var input = control.parent_elem.querySelector("input");
	if (input && input.value != text) input.value = text;
	
	if (this.datepicker == null && input)
	{
		var options = this.params.intersect(ctx, this.constructor.getOptions()).toObject();
		options["dateFormat"] = "yyyy-mm-dd";
		options["autoClose"] = options["autoClose"] || true;
		options["position"] = options["position"] || "top left";
		options["onSelect"] = (value, date, inst) =>
		{
			var ctx = globalContext;
			var is_changed = false;
			var new_value = null;
			
			if (isRange && date instanceof Array && date.length == 2)
			{
				var date_begin = date[0];
				var date_end = date[1];
				var date_begin_old = (this.old_value[0] != null) ? this.old_value[0].toObject(ctx) : null;
				var date_end_old = (this.old_value[1] != null) ? this.old_value[1].toObject(ctx) : null;
				var date_begin_t = (date_begin != null) ? date_begin.getTime() : null;
				var date_end_t = (date_end != null) ? date_end.getTime() : null;
				var date_begin_old_t = (date_begin_old != null) ? date_begin_old.getTime() : null;
				var date_end_old_t = (date_end_old != null) ? date_end_old.getTime() : null;
				if (date_begin_t != date_begin_old_t || date_end_t != date_end_old_t)
				{
					var date_begin_obj = Runtime.Date.fromObject(ctx, date_begin, this.controller.layout.tz);
					var date_end_obj = Runtime.Date.fromObject(ctx, date_end, this.controller.layout.tz);
					new_value = Runtime.Collection.from([date_begin_obj, date_end_obj]);
					is_changed = true;
				}
			}
			
			else if (!isRange)
			{
				var date_old = (this.old_value != null) ? this.old_value.toObject(ctx) : null;
				var date_t = (date != null) ? date.getTime() : null;
				var date_old_t = (date != null) ? date_old.getTime() : null;
				if (date_t != date_old_t)
				{
					new_value = Runtime.Date.fromObject(ctx, date, this.controller.layout.tz);
					is_changed = true;
				}
			}
			
			else if (value == "" && this.old_value != null)
			{
				new_value = null;
				is_changed = true;
			}
			
			if (is_changed)
			{
				var data = new Runtime.Web.Events.ChangeEvent
				(
					ctx,
					{ "value": new_value, "old_value": this.old_value }
				);
				this.signal(ctx, data);
			}
		};
		
		this.datepicker = $(input).datepicker(options);
	}
	
	if (value != null && this.datepicker && isChanged)
	{
		var datepicker = this.datepicker.data('datepicker');
		var datepicker_value = null;
		
		if (value instanceof Runtime.Collection)
		{
			datepicker_value = value
				.map
				(
					ctx, (ctx, item) => (item != null &&
						(item instanceof Runtime.Date || item instanceof Runtime.DateTime))
						? item.toObject(ctx) : null,
				)
				.filter( ctx, Runtime.lib.equalNot(ctx, null) )
				.toArray()
			;
		}
		else
		{
			datepicker_value = (value != null &&
				(value instanceof Runtime.Date || value instanceof Runtime.DateTime))
				? value.toObject(ctx) : null;
		}
		
		datepicker.selectDate( datepicker_value );
	}
	
	#endif
}



</script>


</class>